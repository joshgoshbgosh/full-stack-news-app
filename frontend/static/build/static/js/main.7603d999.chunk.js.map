{"version":3,"sources":["components/TravelList.js","components/MusicList.js","components/CoffeeList.js","components/NewsForm.js","components/NewsList.js","App.js","serviceWorker.js","index.js"],"names":["Component","Article","Card","Img","variant","src","this","props","article","image_url","Body","Title","title","Text","body","NewsList","articles","filter","isTopStory","map","key","id","console","log","trending","className","Fragment","class","href","App","state","fetch","then","response","json","data","setState","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"iSAGyBA,YCADA,YCACA,Y,MCDFA,Y,MCejBC,G,6KAEF,OAIE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKC,KAAKC,MAAMC,QAAQC,YAChD,kBAACP,EAAA,EAAKQ,KAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,KAAaL,KAAKC,MAAMC,QAAQI,OAChC,kBAACV,EAAA,EAAKW,KAAN,KAAYP,KAAKC,MAAMC,QAAQM,Y,GAVnBd,cAqEPe,E,uKA9CX,IAAMC,EAAWV,KAAKC,MAAMS,SACzBC,QAAO,SAAAT,GAAO,OAAIA,EAAQU,cAC1BC,KAAI,SAAAX,GAAO,OAAI,kBAAC,EAAD,CAASY,IAAKZ,EAAQa,GAAIb,QAASA,OACnDc,QAAQC,IAAI,WAAYP,GAE1B,IAAMQ,EAAWlB,KAAKC,MAAMS,SACrBC,QAAO,SAAAT,GAAO,OAAKA,EAAQU,cAC3BC,KAAI,SAAAX,GAAO,OAEV,kBAACN,EAAA,EAAD,CAAMuB,UAAU,SACd,kBAACvB,EAAA,EAAKQ,KAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,CAAYc,UAAU,aAAajB,EAAQI,YAMvD,OACE,kBAAC,IAAMc,SAAP,KACA,gCACA,mCAAQ,0BAAMC,MAAM,gBAAZ,UAAR,YAEE,6BACE,uBAAGC,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,SACA,uBAAGA,KAAK,KAAR,UACA,uBAAGA,KAAK,KAAR,WAGJ,4BAAQH,UAAU,UAAlB,UACA,yBAAKA,UAAU,UACf,yBAAKA,UAAU,cACf,uBAAGA,UAAU,OAAb,eACA,uBAAGA,UAAU,QAAb,cAGGT,EACAQ,O,GAvCcxB,aCyBR6B,E,kDAhDb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAEDuB,MAAQ,CACXd,SAAU,GACVJ,MAAO,IALQ,E,gEAmBE,IAAD,OAClBmB,MAAM,oBACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKC,SAAS,CAACpB,SAAUmB,OACtCE,OAAM,SAAAC,GAAK,OAAIhB,QAAQC,IAAI,SAAUe,Q,+BAgBxC,OACE,6BACE,kBAAC,EAAD,CAAUtB,SAAUV,KAAKwB,MAAMd,gB,GA1CrBhB,aCFEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAC,GACLhB,QAAQgB,MAAMA,EAAMgB,c","file":"static/js/main.7603d999.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Cookies from 'js-cookie';\n\nclass TravelList extends Component {\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default TravelList;\n","import React, {Component} from 'react';\nimport Cookies from 'js-cookie';\n\nclass MusicList extends Component {\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default MusicList;\n","import React, {Component} from 'react';\nimport Coodies from 'js-cookie';\n\nclass CoffeeList extends Component {\n\n}\n\n\n\n\n\n\n\n\nexport default CoffeeList;\n","import React, { Component } from 'react';\n\nclass NewsForm extends Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      title: '',\n      body: '',\n      category: '',\n      status: 'Draft',\n    }\n  }\n\n\nhandleTitleChange = (event) => {\n  this.setState({\n    title: event.target.value\n  })\n}\n\nhandleBodyChange = (event) => {\n  this.setState({\n    body: event.target.value\n  })\n}\n\nhandleCategoryChange = (event) => {\n  this.setState({\n    category: event.target.value\n  })\n}\n\nhandleStatusChange = (event) => {\n  this.setState({\n    status: event.target.value\n  })\n}\n\nhandleSubmit = (event) => {\n  alert(`${this.state.tite} ${this.state.body} ${this.state.category} ${this.state.status}`)\n  event.preventDefault()\n}\n\n\n  render() {\n    return (\n      <form className=\"col-6\" onSubmit={this.handleSubmit}>\n        <div className=\"form-group\">\n          <label>Title</label>\n            <input type=\"text\" value={this.state.title} onChange ={this.handleTitleChange} />\n              </div>\n                <div>\n                  <label>Body</label>\n                    <textarea rows=\"5\" value={this.state.body} onChange={this.handleBodyChange}></textarea>\n                      </div>\n                        <div>\n                        <label className=\"catg\">Category</label>\n                        <select className=\"form-control\" id=\"category\" name=\"category\" onChange={this.handleInput}>\n                      <option>Select Category</option>\n                       <option value=\"Music\">Music</option>\n                     <option value=\"Travel\">Travel</option>\n                   <option value=\"Coffee\">Coffee</option>\n                </select>\n                    </div>\n                  <div>\n                <label>Status</label>\n                <select className=\"form-control\" id=\"status\" name=\"status\" onChange={this.handleInput}>\n              <option>Select Status</option>\n                <option value=\"Draft\">Draft</option>\n                 <option value=\"Submitted\">Submitted</option>\n                 <option value=\"Published\">Published</option>\n               </select>\n               </div>\n        <button type=\"submit\"className=\"sub btn btn-outline-dark\">Submit</button>\n</form>\n\n\n    )\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\nexport default NewsForm;\n","import React, { Component } from 'react';\nimport Cookies from 'js-cookie';\nimport Card from 'react-bootstrap/Card';\nimport './NewsList.css';\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Article extends Component {\n  render() {\n    return (\n// <container>\n//   <row>\n//       <col>\n      <Card>\n        <Card.Img variant=\"top\" src={this.props.article.image_url} />\n        <Card.Body>\n          <Card.Title>{this.props.article.title}</Card.Title>\n          <Card.Text>{this.props.article.body}</Card.Text>\n        </Card.Body>\n      </Card>\n  //     </col>\n  //   </row>\n  // </container>\n    )\n  }\n}\n\n\nclass NewsList extends Component{\n  render() {\n    const articles = this.props.articles\n      .filter(article => article.isTopStory)\n      .map(article => <Article key={article.id} article={article} />);\n      console.log('articles', articles);\n\n    const trending = this.props.articles\n          .filter(article => !article.isTopStory)\n          .map(article =>(\n\n            <Card className=\"trend\">\n              <Card.Body>\n                <Card.Title className=\"trendtext\">{article.title}</Card.Title>\n              </Card.Body>\n            </Card>\n\n            )\n          );\n    return(\n      <React.Fragment>\n      <header>\n      <h1>THE <span class=\"special-word\">RECORD</span>EXCHANGE</h1>\n\n        <nav>\n          <a href=\"#\">HOME</a>\n          <a href=\"#\">MUSIC</a>\n          <a href=\"#\">COFFEE</a>\n          <a href=\"#\">TRAVEL</a>\n        </nav>\n\n      <button className=\"log-in\">LOG IN</button>\n      <div className=\"black\"></div>\n      <div className=\"top-litter\">\n      <p className=\"top\">TOP STORIES</p>\n      <p className=\"pick\">TRENDING</p>\n      </div>\n      </header>\n        {articles}\n        {trending}\n      </React.Fragment>\n    )\n  }\n\n}\n\n\n\nexport default NewsList;\n","import React, { Component } from 'react';\nimport TravelList from './components/TravelList';\nimport MusicList from './components/MusicList';\nimport CoffeeList from './components/CoffeeList';\nimport './App.css';\nimport NewsForm from './components/NewsForm';\nimport NewsList from './components/NewsList';\nimport Header from './components/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      articles: [],\n      title: [],\n      // image_url:\n    }\n\n\n\n\n\n\n\n\n\n  }\n\n  componentDidMount() {\n    fetch('api/v1/articles/')\n      .then(response => response.json())\n      .then(data => this.setState({articles: data}))\n      .catch(error => console.log('Error:', error));\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n  render() {\n    return(\n      <div>\n        <NewsList articles={this.state.articles}/>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}